---
title: Using Multiple Signing Algorithms with the ARC (Authenticated Received Chain) Protocol
abbrev: ARC-Multi
docname: draft-ietf-dmarc-arc-multi-01
date: 2018-01-22

# stand_alone: true

ipr: trust200902
area: art
wg: DMARC Working Group
kw: Internet-Draft
submission: IETF
cat: exp

coding: utf-8
pi:    # can use array (if all yes) or hash here
#  - toc
#  - sortrefs
#  - symrefs
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
      -
        ins: K. Andersen
        name: Kurt Andersen
        org: LinkedIn
        street: 1000 West Maude Ave
        city: Sunnyvale
        region: California
        code: 94085
        country: USA
        email: kurta@linkedin.com
      -
        ins: S. Blank
        name: Seth Blank
        org: ValiMail
        role: editor
        email: seth@valimail.com
      -
        ins: J. Levine
        name: John Levine
        org: Taugh Networks
        role: editor
        email: TBD

normative:
  RFC1345:
  RFC5234:
  RFC5321:
  RFC5322:
  RFC3463:
  RFC7601:
  RFC7208:
  RFC6651:
  RFC5863:
  RFC6377:
  RFC5585:
  RFC6376:
  RFC4686:
  RFC5598:
  RFC5226:
  RFC2142:
  RFC2606:
  RFC3463:
  RFC2119:

informative:
  RFC6982:
  RFC7489:
  RFC7960:
  ENHANCED-STATUS: 
    title: IANA SMTP Enhanced Status Codes
    target: http://www.iana.org/assignments/smtp-enhanced-status-codes/smtp-enhanced-status-codes.xhtml
  ARC-DRAFT-11:
    title: Authenticated Received Chain (ARC) Protocol (I-D-11)
    target: https://tools.ietf.org/html/draft-ietf-dmarc-arc-protocol-11
    author:
      -
        ins: K. Andersen
        name: Kurt Andersen
      -
        ins: B. Long
        name: Brandon Long
      -
        ins: S. Jones
        name: Steven Jones

entity:
      SELF: "[I-D.ARC-MULTI]"

# --- note_IESG_Note
#
# bla bla bla

--- abstract

The Authenticated Received Chain (ARC) protocol creates a mechanism whereby a
series of handlers of an email message can conduct authentication of the email
message as it passes among them on the way to its destination.

Initial development of ARC has been done with a single allowed signing
algorithm, but parallel work in the DCRUP working group
(https://datatracker.ietf.org/wg/dcrup/about/) is expanding the supported
algorithms. This specification defines how to extend ARC for multiple signing
algorithms.

--- middle
# Introduction {#intro}

The Authenticated Received Chain (ARC) protocol adds a traceable chain of 
signatures that cover the handling of an email message through a chain of
intermediary handlers.

Initial development of ARC has been done with a single allowed signing
algorithm, but parallel work in the DCRUP working group
(https://datatracker.ietf.org/wg/dcrup/about/) is expanding the supported
algorithms. This specification defines how to extend ARC for multiple signing
algorithms.

# Overview {#overview}

In order to phase in new signing algorithms, this specification identifies how
signers and validators MUST process ARC sets found in email messages.

# Definitions and Terminology

This section defines terms used in the rest of the document. 

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
interpreted as described in {{RFC2119}}. 

Because many of the core concepts and definitions are found in {{RFC5598}},
readers SHOULD to be familiar with the contents of {{RFC5598}}, and in
particular, the potential roles of intermediaries in the delivery of email.

# Supporting Alternate Signing Algorithms {#alt-sign}

During a period where multiple algorithms are allowed, all of the statements in
the ARC spec which refer to "exactly one set of ARC headers per instance" need
to be understood as "at least one set per instance and no more than one set per
instance per algorithm".

# General Approach

## Signers

Signers MUST initiate ARC signing of messages with all supported algorithms that 
they are capable of using.

Signers MUST continue ARC chains with all supported algorithms that 
they are capable of using.

## Validators

Validators MUST use the longest ARC chain on the message for which they can 
interpret the signing algorithm.

# Phases of Algorithm Evolution

## Introductory Period

Intermediaries MUST be able to validate ARC chains built with either algorithm
but MAY create ARC sets with either (or both) algorithm.

The introductory period should be at least six (6) months.

## Co-Existence Period

Intermediaries MUST be able to validate ARC chains build with either algorithm
and MUST create ARC sets with both algorithms.  Chains ending with either
algorithm may be used for the result.

## Deprecation Period

ARC sets built with algorithms that are being deprecated MAY be considered
valid within an ARC chain, however, intermediaries MUST NOT create additional
sets with the deprecated algorithm.

The deprecation period should be at least two (2) years.

## Obsolescence Period

ARC sets built with algorithms that are obsolete MUST NOT be considered
valid within an ARC chain. Intermediaries MUST NOT create any
sets with any obsoleted algorithm.

# Privacy Considerations

No unique privacy considerations are introduced by this specification beyond those
of the base {{ARC-DRAFT-11}} protocol.

# IANA Considerations

No new IANA considerations are introduced by this specification.

# Security Considerations {#sec-con}

No new security considerations are introduced by this specification beyond those
of the base {{ARC-DRAFT-11}} protocol.

--- back

# Acknowledgements

This draft is the work of DMARC Working Group.

Grateful appreciation is extended to the people who provided feedback through the discuss
mailing list.

# Comments and Feedback

Please address all comments, discussions, and questions to <dmarc@ietf.org>. 


--- fluff

<!--  LocalWords:  received header email DMARC authentication authenticated
-->
<!--  LocalWords:  signature DKIM OAR authentication-results
-->

